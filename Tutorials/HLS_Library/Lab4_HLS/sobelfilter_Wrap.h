// ==============================================================
// File generated by Xilinx Model Composer(TM)
// Version: 2019.2
//  
// (c) Copyright 2017 - 2019 Xilinx, Inc. All rights reserved.
//  
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//  
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//  
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//  
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
// ==============================================================

#include <stdint.h>
#include "ap_int.h"
#include "imgproc/xf_sobel.hpp"
#include "common/xf_structs.hpp"
#include "common/xf_common.hpp"

#pragma XMC INPORT in
#pragma XMC OUTPORT video_out
#pragma XMC SUPPORTS_STREAMING

template<int ROWS, int COLS, int NPC>
void SobelFilter_XMC(uint8_t in[ROWS][COLS],  
                     uint16_t outX[ROWS][COLS],
                     uint16_t outY[ROWS][COLS]
                    )
{  
     ap_uint<16> data_in;
     ap_uint<16> data_outX;
     ap_uint<16> data_outY;
   
    
     const int FILTER_TYPE = XF_FILTER_3X3;
     const int BORDER_TYPE = XF_BORDER_CONSTANT;
     const int TYPE_IN = XF_8UC1;
     const int TYPE_OUT = XF_16SC1;
     const int height = ROWS;
     const int width = COLS;
     //const bool USE_URAM = false;
      
    xf::cv::Mat<TYPE_IN,ROWS,COLS,XF_NPPC1> src_obj;
    #pragma HLS stream variable=src_obj dim=1 depth=1
    
 
    xf::cv::Mat<TYPE_OUT,ROWS,COLS,XF_NPPC1> dstx_obj;
    #pragma HLS stream variable=dstx_obj dim=1 depth=1
    
    
    xf::cv::Mat<TYPE_OUT,ROWS,COLS,XF_NPPC1> dsty_obj;
    #pragma HLS stream variable=dsty_obj dim=1 depth=1
    
    
    #pragma HLS dataflow
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
        #pragma HLS pipeline II=1
            data_in = in[i][j];
            src_obj.write(i * COLS + j,(data_in));
        }
    }
    
     xf::cv::Sobel<BORDER_TYPE, FILTER_TYPE,XF_8UC1,XF_16SC1,height, width,NPC> (src_obj, dstx_obj, dsty_obj);

      for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
        #pragma HLS pipeline II=1
            data_outX = dstx_obj.read(i * COLS + j);
            data_outY = dsty_obj.read(i * COLS + j);
            outX[i][j] = data_outX;
            outY[i][j] = data_outY;
        }
      }
     
  }