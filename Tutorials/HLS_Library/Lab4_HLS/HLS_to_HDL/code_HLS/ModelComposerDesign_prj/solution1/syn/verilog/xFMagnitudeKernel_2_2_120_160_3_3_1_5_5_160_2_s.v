// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        srcX_obj_449_dout,
        srcX_obj_449_empty_n,
        srcX_obj_449_read,
        srcY_obj_450_dout,
        srcY_obj_450_empty_n,
        srcY_obj_450_read,
        dst_obj_451_din,
        dst_obj_451_full_n,
        dst_obj_451_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] srcX_obj_449_dout;
input   srcX_obj_449_empty_n;
output   srcX_obj_449_read;
input  [15:0] srcY_obj_450_dout;
input   srcY_obj_450_empty_n;
output   srcY_obj_450_read;
output  [15:0] dst_obj_451_din;
input   dst_obj_451_full_n;
output   dst_obj_451_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg srcX_obj_449_read;
reg srcY_obj_450_read;
reg dst_obj_451_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire    grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start;
wire    grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_done;
wire    grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_idle;
wire    grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_ready;
wire    grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_srcX_obj_449_read;
wire    grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_srcY_obj_450_read;
wire   [15:0] grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_dst_obj_451_din;
wire    grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_dst_obj_451_write;
reg    grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln72_fu_56_p2;
wire    ap_CS_fsm_state3;
reg   [6:0] i_fu_34;
wire   [6:0] i_2_fu_62_p2;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start_reg = 1'b0;
end

xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start),
    .ap_done(grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_done),
    .ap_idle(grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_idle),
    .ap_ready(grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_ready),
    .srcX_obj_449_dout(srcX_obj_449_dout),
    .srcX_obj_449_empty_n(srcX_obj_449_empty_n),
    .srcX_obj_449_read(grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_srcX_obj_449_read),
    .srcY_obj_450_dout(srcY_obj_450_dout),
    .srcY_obj_450_empty_n(srcY_obj_450_empty_n),
    .srcY_obj_450_read(grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_srcY_obj_450_read),
    .dst_obj_451_din(grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_dst_obj_451_din),
    .dst_obj_451_full_n(dst_obj_451_full_n),
    .dst_obj_451_write(grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_dst_obj_451_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln72_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln72_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start_reg <= 1'b1;
        end else if ((grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_ready == 1'b1)) begin
            grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_34 <= 7'd0;
    end else if (((icmp_ln72_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_34 <= i_2_fu_62_p2;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_obj_451_write = grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_dst_obj_451_write;
    end else begin
        dst_obj_451_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        srcX_obj_449_read = grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_srcX_obj_449_read;
    end else begin
        srcX_obj_449_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        srcY_obj_450_read = grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_srcY_obj_450_read;
    end else begin
        srcY_obj_450_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln72_fu_56_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign dst_obj_451_din = grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_dst_obj_451_din;

assign grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start = grp_xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_Pipeline_colLoop_fu_38_ap_start_reg;

assign i_2_fu_62_p2 = (i_fu_34 + 7'd1);

assign icmp_ln72_fu_56_p2 = ((i_fu_34 == 7'd120) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //xFMagnitudeKernel_2_2_120_160_3_3_1_5_5_160_2_s
