// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module writeStream_bool_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ModelComposerDesign_core_Edge_out_dout,
        ModelComposerDesign_core_Edge_out_empty_n,
        ModelComposerDesign_core_Edge_out_read,
        Edge_out_TREADY,
        Edge_out_TDATA,
        Edge_out_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] ModelComposerDesign_core_Edge_out_dout;
input   ModelComposerDesign_core_Edge_out_empty_n;
output   ModelComposerDesign_core_Edge_out_read;
input   Edge_out_TREADY;
output  [7:0] Edge_out_TDATA;
output   Edge_out_TVALID;

reg ap_idle;
reg ModelComposerDesign_core_Edge_out_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_Edge_out_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln390_fu_65_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    Edge_out_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ModelComposerDesign_core_Edge_out_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [14:0] indvar_flatten_fu_40;
wire   [14:0] add_ln390_fu_71_p2;
wire    ap_loop_init;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] Edge_out_TDATA_int_regslice;
reg    Edge_out_TVALID_int_regslice;
wire    Edge_out_TREADY_int_regslice;
wire    regslice_both_Edge_out_U_vld_out;
reg    ap_condition_102;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_Edge_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Edge_out_TDATA_int_regslice),
    .vld_in(Edge_out_TVALID_int_regslice),
    .ack_in(Edge_out_TREADY_int_regslice),
    .data_out(Edge_out_TDATA),
    .vld_out(regslice_both_Edge_out_U_vld_out),
    .ack_out(Edge_out_TREADY),
    .apdone_blk(regslice_both_Edge_out_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_102)) begin
        if ((icmp_ln390_fu_65_p2 == 1'd0)) begin
            indvar_flatten_fu_40 <= add_ln390_fu_71_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_40 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        Edge_out_TDATA_blk_n = Edge_out_TREADY_int_regslice;
    end else begin
        Edge_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Edge_out_TVALID_int_regslice = 1'b1;
    end else begin
        Edge_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ModelComposerDesign_core_Edge_out_blk_n = ModelComposerDesign_core_Edge_out_empty_n;
    end else begin
        ModelComposerDesign_core_Edge_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ModelComposerDesign_core_Edge_out_read = 1'b1;
    end else begin
        ModelComposerDesign_core_Edge_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln390_fu_65_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_40;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Edge_out_TDATA_int_regslice = ModelComposerDesign_core_Edge_out_dout;

assign Edge_out_TVALID = regslice_both_Edge_out_U_vld_out;

assign add_ln390_fu_71_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_Edge_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_Edge_out_U_apdone_blk == 1'b1) | (1'b0 == ModelComposerDesign_core_Edge_out_empty_n) | (1'b0 == Edge_out_TREADY_int_regslice))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((1'b0 == Edge_out_TREADY_int_regslice) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_Edge_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_Edge_out_U_apdone_blk == 1'b1) | (1'b0 == ModelComposerDesign_core_Edge_out_empty_n) | (1'b0 == Edge_out_TREADY_int_regslice))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((1'b0 == Edge_out_TREADY_int_regslice) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_Edge_out_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_Edge_out_U_apdone_blk == 1'b1) | (1'b0 == ModelComposerDesign_core_Edge_out_empty_n) | (1'b0 == Edge_out_TREADY_int_regslice))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((1'b0 == Edge_out_TREADY_int_regslice) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_Edge_out_U_apdone_blk == 1'b1) | (1'b0 == ModelComposerDesign_core_Edge_out_empty_n) | (1'b0 == Edge_out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (1'b0 == Edge_out_TREADY_int_regslice);
end

always @ (*) begin
    ap_condition_102 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln390_fu_65_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd19200) ? 1'b1 : 1'b0);

endmodule //writeStream_bool_s
