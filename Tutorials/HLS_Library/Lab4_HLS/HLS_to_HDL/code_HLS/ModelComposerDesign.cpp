// ==============================================================
// File generated by Xilinx Model Composer(TM)
// Version: 2021.2
//  
// (c) Copyright 2017 - 2021 Xilinx, Inc. All rights reserved.
//  
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//  
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//  
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//  
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
// ==============================================================
#include "ModelComposerDesign.h"
#include <xmcArithBasics.h>
#include <xmcArithDivide.h>
#include <xmcArithSatBasics.h>
#include "sobelfilter_Wrap.h"
#include "GradientMag_Wrap.h"
#include <StreamAdapters.h>
void
p31(uint16_t Greater_in1[120][160], bool Greater_out[120][160])
{
    int16_t Constant_c_out = 130;
    for (uint32_t k0 = 0u; k0 < 120u; ++k0) {
        for (uint32_t k1 = 0u; k1 < 160u; ++k1) {
            #pragma HLS pipeline II=1
            uint16_t Greater_in1s;
            int16_t Constant_out;
            bool out1_write;
            Greater_in1s = Greater_in1[k0][k1];
            Constant_out = Constant_c_out;
            out1_write = xmc::arith::convert< int32_t >(Greater_in1s) > 
                xmc::arith::convert< int32_t >(Constant_out);
            Greater_out[k0][k1] = out1_write;
        }
    }
}

void
ModelComposerDesign_core(uint8_t Image_in[120][160], bool Edge_out[120][160])
{
    #pragma HLS inline
    uint16_t SobelFilter_XMC_out1[120][160];
    #pragma HLS stream variable=SobelFilter_XMC_out1 depth=3
    uint16_t SobelFilter_XMC_out2[120][160];
    #pragma HLS stream variable=SobelFilter_XMC_out2 depth=3
    uint16_t GradientMag_XMC_out1[120][160];
    #pragma HLS stream variable=GradientMag_XMC_out1 depth=3
    SobelFilter_XMC< 120, 160, 1 >(Image_in, SobelFilter_XMC_out1, 
        SobelFilter_XMC_out2);
    GradientMag_XMC< 120, 160, 1 >(SobelFilter_XMC_out1, SobelFilter_XMC_out2, 
        GradientMag_XMC_out1);
    p31(GradientMag_XMC_out1, Edge_out);
}

/**
 * @brief ModelComposerDesign
 * @param Image_in direction=input protocol=AXI4-Stream length=19200
 * @param Edge_out direction=output protocol=AXI4-Stream length=19200
 */
void
ModelComposerDesign(hls::stream< uint8_t >& Image_in, hls::stream< bool >& 
    Edge_out)
{
    #pragma HLS INTERFACE axis port=Image_in
    #pragma HLS INTERFACE axis port=Edge_out
    #pragma HLS INTERFACE ap_ctrl_none port=return
    #pragma HLS dataflow
    uint8_t Image_in_adapter_out1[120][160];
    #pragma HLS stream variable=Image_in_adapter_out1 depth=3
    bool ModelComposerDesign_core_Edge_out[120][160];
    #pragma HLS stream variable=ModelComposerDesign_core_Edge_out depth=3
    xmc::StreamAdapter2d<120, 160>::readStream(Image_in, Image_in_adapter_out1)
        ;
    ModelComposerDesign_core(Image_in_adapter_out1, 
        ModelComposerDesign_core_Edge_out);
    xmc::StreamAdapter2d<120, 160>::writeStream(Edge_out, 
        ModelComposerDesign_core_Edge_out);
}


