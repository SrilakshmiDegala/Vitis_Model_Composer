
function DET3x3_config(this_block)

  % Revision History:
  %
  %   07-Sep-2023  (15:12 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('vmcwrap_DET3x3');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('I11');
  this_block.addSimulinkInport('I21');
  this_block.addSimulinkInport('I31');
  this_block.addSimulinkInport('I12');
  this_block.addSimulinkInport('I22');
  this_block.addSimulinkInport('I32');
  this_block.addSimulinkInport('I13');
  this_block.addSimulinkInport('I23');
  this_block.addSimulinkInport('I33');
  this_block.addSimulinkInport('VI');

  this_block.addSimulinkOutport('O');
  this_block.addSimulinkOutport('VO');

  O_port = this_block.port('O');
  O_port.setType('XFloat_8_24');

  VO_port = this_block.port('VO');
  VO_port.setType('UFix_1_0');
  VO_port.useHDLVector(false);


  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('I11').width ~= 32)
      this_block.setError('Input data type for port "I11" must have width=32.');
    end

    if (~strcmp(this_block.port('I11').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I11" must be "XFloat_8_24".');
    end

    if (this_block.port('I21').width ~= 32)
      this_block.setError('Input data type for port "I21" must have width=32.');
    end

    if (~strcmp(this_block.port('I21').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I21" must be "XFloat_8_24".');
    end

    if (this_block.port('I31').width ~= 32)
      this_block.setError('Input data type for port "I31" must have width=32.');
    end

    if (~strcmp(this_block.port('I31').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I31" must be "XFloat_8_24".');
    end

    if (this_block.port('I12').width ~= 32)
      this_block.setError('Input data type for port "I12" must have width=32.');
    end

    if (~strcmp(this_block.port('I12').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I12" must be "XFloat_8_24".');
    end

    if (this_block.port('I22').width ~= 32)
      this_block.setError('Input data type for port "I22" must have width=32.');
    end

    if (~strcmp(this_block.port('I22').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I22" must be "XFloat_8_24".');
    end

    if (this_block.port('I32').width ~= 32)
      this_block.setError('Input data type for port "I32" must have width=32.');
    end

    if (~strcmp(this_block.port('I32').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I32" must be "XFloat_8_24".');
    end

    if (this_block.port('I13').width ~= 32)
      this_block.setError('Input data type for port "I13" must have width=32.');
    end

    if (~strcmp(this_block.port('I13').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I13" must be "XFloat_8_24".');
    end

    if (this_block.port('I23').width ~= 32)
      this_block.setError('Input data type for port "I23" must have width=32.');
    end

    if (~strcmp(this_block.port('I23').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I23" must be "XFloat_8_24".');
    end

    if (this_block.port('I33').width ~= 32)
      this_block.setError('Input data type for port "I33" must have width=32.');
    end

    if (~strcmp(this_block.port('I33').type,'XFloat_8_24'))
      this_block.setError('Input data type for port "I33" must be "XFloat_8_24".');
    end

    if (this_block.port('VI').width ~= 1)
      this_block.setError('Input data type for port "VI" must have width=1.');
    end

    this_block.port('VI').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'CLK','CE')
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------
  % NOTE: vmcwrapper File is required to handle non std
  % logic port data types like SIGNED,UNSIGNED,BOOLEAN etc.

      this_block.addFile('BDELAY.vhd');
      this_block.addFile('cfloat_pkg.vhd');
      this_block.addFile('DELAY.vhd');
      this_block.addFile('float_pkg.vhd');
      this_block.addFile('DSPFP32_GW.vhd');

  this_block.addFile('DET3x3.vhd');
  this_block.addFile('vmcwrap_DET3x3.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 && uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

% This function converts the matlab array to VHDL array Style 
% and this is valid only in case of generic parameters. 
function arrayHDLType = convertArrayType(inArr) 
arrayHDLType = '';
for i=1:length(inArr)
    if (i == 1)
        arrayHDLType = [arrayHDLType '(' num2str(inArr(i))]; 
    elseif (i == length(inArr)) 
        arrayHDLType = [arrayHDLType ',' num2str(inArr(i)) ')']; 
    else 
        arrayHDLType = [arrayHDLType ',' num2str(inArr(i))]; 
    end 
end 
